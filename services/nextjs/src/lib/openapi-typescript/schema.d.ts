/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new user. */
        post: operations["auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token/obtain/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Obtain JWT pair. Sets httpOnly cookies: `access`, `refresh`. */
        post: operations["auth_token_obtain_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh access token using the `refresh` cookie. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthOK: {
            readonly detail: string;
        };
        RefreshOK: {
            detail: string;
        };
        UserLogin: {
            /** Format: email */
            email: string;
            password: string;
        };
        UserRead: {
            first_name: string;
            last_name: string;
            /** @description Letters, digits and @/./+/-/_ only allowed. */
            username: string;
            /** Format: email */
            email: string;
        };
        UserWrite: {
            first_name: string;
            last_name: string;
            /** @description Letters, digits and @/./+/-/_ only allowed. */
            username: string;
            /** Format: email */
            email: string;
            password: string;
        };
        ValidationError: {
            first_name?: string[];
            last_name?: string[];
            username?: string[];
            email?: string[];
            password?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserWrite"];
                "application/x-www-form-urlencoded": components["schemas"]["UserWrite"];
                "multipart/form-data": components["schemas"]["UserWrite"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation errors: mapping from field to list of messages. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    auth_token_obtain_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
                "application/x-www-form-urlencoded": components["schemas"]["UserLogin"];
                "multipart/form-data": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthOK"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOK"];
                };
            };
        };
    };
}
